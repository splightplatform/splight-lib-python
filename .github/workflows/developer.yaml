# used when creating a feature branch for development
# enabling the creation of dev versions (x.y.z-devN) that are uploaded to pypi
# if the version is correct, that is, greater than the version of master and pypi
name: Developer
on: workflow_dispatch

env:
  LIBRARY_NAME: "splight-lib"

jobs:
  verify_version:
    runs-on: ubuntu-latest
    name: Verify version is higher than last PyPi package and master version
    steps:
      # get master version
      - name: Checkout to master
        uses: actions/checkout@v3
        with:
          ref: master

      - name: Get version from master branch
        run: echo "MASTER_VERSION=$(grep version pyproject.toml | head -1 | awk '{print $3}' | tr -d '\"')" >> "$GITHUB_ENV"

      # get current branch version
      - name: Checkout to feature branch
        uses: actions/checkout@v3

      - name: Checks if you are in the master branch
        if: ${{ github.ref == 'refs/heads/master' }}
        run: |
          echo "Cannot run this action in the master branch."
          exit 1

      - name: Get version from feature branch
        run: echo "CURRENT_VERSION=$(grep version pyproject.toml | head -1 | awk '{print $3}' | tr -d '\"')" >> "$GITHUB_ENV"

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.11"

      # validate versions
      - name: Validates version is a dev version.
        run: python3 .github/workflows/scripts/check_dev_version.py ${{ env.CURRENT_VERSION }}

      - name: Verifies the dev version is not uploaded.
        run: python .github/workflows/scripts/check_version_uploaded.py ${{ env.CURRENT_VERSION }} $LIBRARY_NAME

  upload_developer_to_pypi:
    runs-on: ubuntu-latest
    name: Upload the version to pypi only if it's a developer version
    needs: [verify_version]
    steps:
      - name: Checkout to feature branch
        uses: actions/checkout@v3

      - name: Get version from feature branch
        run: echo "CURRENT_VERSION=$(grep version pyproject.toml | head -1 | awk '{print $3}' | tr -d '\"')" >> "$GITHUB_ENV"

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.11"

      - name: Install latest uv and set Python version
        uses: astral-sh/setup-uv@v6

      - name: Build package
        run: uv build

      - name: Load variable to decide whether to publish package
        run: |
          if [[ $CURRENT_VERSION =~ "dev" ]]; then
              echo "PUBLISH_PACKAGE=true" >> "$GITHUB_ENV"
          else
              echo "PUBLISH_PACKAGE=false" >> "$GITHUB_ENV"
          fi

      - name: Publish package
        uses: pypa/gh-action-pypi-publish@27b31702a0e7fc50959f5ad993c78deac1bdfc29
        if: ${{ env.PUBLISH_PACKAGE == 'true' }}
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
